generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_token {
  id               String    @id @default(uuid())
  created_datetime DateTime? @default(now())
  updated_datetime DateTime? @default(now())
  deleted_datetime DateTime?
  user_id          String?   @db.VarChar(256)
  active           Int       @default(1)
  expiry_datetime  DateTime?
  token            String? 
}

model Organization {
  id                String         @id @default(uuid())
  aiOrgId           Int?
  name              String?
  enable_totp_auth  Boolean  @default(false)
  phone             String?
  address           String?
  city              String?
  state             String?
  country           String?
  openAiKey         String?
  zip               Int?
  domain            String?
  industry          String?
  description       String?
  users             User[]
  faqs              FAQ[]
  emailConfig       Json?
  aiChatBotSettings Json?
  aiEnabled         Boolean        @default(false)
  createdAt         DateTime       @default(now())
  Notification      Notification[]
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  fullName        String
  password        String
  phone           String?
  role            String       @default("admin")
  verified        Boolean      @default(false)
  orgId           String
  aiOrgId         Int?
  profilePicture  String?
  organization    Organization @relation(fields: [orgId], references: [id])
  createdAt       DateTime     @default(now())
  online          Boolean      @default(true)
  schedule        Json?
  deletedAt       DateTime?
  faqs            FAQ[]
  // Fields for OTP verification
  otpCode         String?
  otpExpiresAt    DateTime?

  // Fields for password reset
  resetToken        String?
  resetTokenExpires DateTime?

  activationToken        String?
  activationTokenExpires DateTime?
  userSettings           UserSettings?
  
  // 2FA relationship
  twoFactorAuth         TwoFactorAuth?
}

model TwoFactorAuth {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 2FA status
  isEnabled         Boolean  @default(false)
  isAuthenticatorAppAdded Boolean @default(false)
  
  // Secret management
  secret            String?  // Encrypted TOTP secret
  tempSecret        String?  // Temporary secret during setup
  
  // Timestamps
  enabledAt         DateTime?
  authenticatorAppAddedAt DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Backup codes (optional)
  backupCodes      String[] // Array of hashed backup codes
  
  // Last used timestamp for rate limiting
  lastUsedAt       DateTime?
}

model Thread {
  id         String    @id @default(uuid())
  user       String
  messages   Message[]
  aiOrgId    Int
  readed     Boolean   @default(false)
  assignedTo String?
  url        String    @default("")
  ip         String    @default("")
  name       String    @default("")
  email      String    @default("")
  createdAt  DateTime  @default(now())
  type       String    @default("unassigned")

  // Back-reference for tasks
  tasks        Task[]
  Notification Notification[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  sender    String
  seen      Boolean  @default(false)
  threadId  String
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  fileUrl   String?
  fileType  String?
  fileName  String?
  createdAt DateTime @default(now())
}

model ChatConfig {
  id                    String   @id @default(uuid())
  orgId                 String?
  aiOrgId               Int?
  allowFileUpload       Boolean?
  addInitialPopupText   String?
  addChatBotName        String?
  ChatBotLogoImage      String?
  allowNameEmail        Boolean?
  allowEmojis           Boolean?
  allowCustomGreeting   Boolean?
  customGreetingMessage String?
  allowFontFamily       Boolean?
  customFontFamily      String?
  position              String?
  iconColor             String?
  chatWindowColor       String?
  fontColor             String?
  availability          Boolean?
  socketServer          String?
  emailConfig           Json?
}

model Task {
  id         String   @id @default(uuid())
  name       String?
  email      String?
  orgId      String?
  aiOrgId    Int
  readed     Boolean  @default(false)
  threadId   String
  query      String
  assignedTo String?
  status     String   @default("pending")
  priority   String   @default("low")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  settings  Json // Flexible JSON object for all types of settings
  updatedAt DateTime @updatedAt
}

model FAQ {
  id           Int          @id @default(autoincrement())
  orgId        String
  userId       String?
  question     String       @db.Text
  answer       String       @db.Text
  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Notification {
  id            String       @id @default(uuid())
  message       String[]
  latestMessage String
  threadId      String
  orgId         String
  thread        Thread       @relation(fields: [threadId], references: [id])
  organization  Organization @relation(fields: [orgId], references: [id])
  read          Boolean      @default(false)
  notification  Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}


